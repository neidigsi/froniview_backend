openapi: 3.0.0
info:
  title: Froniview API
  version: '2.0'
  description: 'This API follows the RESTful standard. It is for the "Froniview" App which is developed as an visualising android app of the solar-data of an inverter by "Fronius".'
servers:
  - url: localhost
paths:
  /day:
    get:
      summary: Data of one specific day
      tags:
        - Day
      responses:
        '200':
          description: This is the response if the request could be successfully retrieved. It includes all data needed to display in the diagram view of the app.
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    type: array
                    description: 'The currently produced energy in "W".'
                    items:
                      type: object
                      description: 'One timestamp-value pair, which is created each five minutes.'
                      properties:
                        timestamp:
                          type: string
                          description: 'The timestamp of the value. An example is "2018-08-17T17:40:01+02:00"'
                        value:
                          type: integer
                          description: 'The value at the given timestamp in "W".'
                        sum_of_values:
                          type: integer
                          description: 'The summed values to the given timestamp as "Wh".'
                  total:
                    type: string
                    description: 'The totally produced energy at the given day in "Wh".'
              examples:
                Example:
                  value:
                    values:
                      - timestamp: '2020-06-14T14:20:01.000Z'
                        value: 1266
                        sum_of_values: 10972
                      - timestamp: '2020-06-14T14:25:01.000Z'
                        value: 1701
                        sum_of_values: 11095
                      - timestamp: '2020-06-14T14:30:01.000Z'
                        value: 2278
                        sum_of_values: 11268
                    total: 11268
        '400':
          description: The user will receive this response if the given date is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  day:
                    type: integer
                  month:
                    type: integer
                  year:
                    type: integer
              examples:
                Example:
                  value:
                    message: 'Given date is not valid!'
                    year: 20000
                    month: 13
                    day: 43
        '404':
          description: The user will receive this response if there could no data be found to the given date.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  year:
                    type: integer
                  month:
                    type: integer
                  day:
                    type: integer
              examples:
                Example:
                  value:
                    message: 'No data could be found to given date!'
                    year: 2012
                    month: 12
                    day: 31
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                Example:
                  value:
                    error: {}
      operationId: get-day
      parameters:
        - schema:
            type: integer
          in: query
          name: day
          description: Day of month as integer value.
          required: true
        - schema:
            type: integer
          in: query
          name: month
          description: Month of the day as integer value.
          required: true
        - schema:
            type: integer
          in: query
          name: year
          description: The year of the day as integer value.
          required: true
      description: This endpoint is used to retrieve data of one day. The user receives an response with all necessary data which will be displayed in the diagram later.
  /month:
    get:
      summary: Data of one specific month
      tags:
        - Month
      responses:
        '200':
          description: This is the response if the request could be successfully retrieved. It includes all data needed to display in the diagram view of the app.
          content:
            application/json:
              schema:
                type: object
                properties:
                  values:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          description: 'The day in the following format: "yyyy-mm-dd".'
                        value:
                          type: integer
                        sum_of_values:
                          type: integer
        '400':
          description: The user will receive this response if the given month is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  year:
                    type: integer
                  month:
                    type: integer
              examples:
                Example:
                  value:
                    message: 'Given month is not valid!'
                    year: 20000
                    month: 13
        '404':
          description: The user will receive this response if there could no data be found to the given month.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  year:
                    type: integer
                  month:
                    type: integer
              examples:
                Example:
                  value:
                    message: 'No data could be found to given month!'
                    year: 2012
                    month: 12
        '500':
          description: Internal Server Error
      operationId: get-month
      parameters:
        - schema:
            type: integer
          in: query
          name: month
          description: Month of the year as integer value.
          required: true
        - schema:
            type: integer
          in: query
          name: year
          description: The year of the specific month as integer value.
          required: true
      description: This endpoint is used to retrieve data of a month. The user receives an response with all necessary data which will be displayed in the diagram later.
  /year:
    get:
      summary: Your GET endpoint
      tags:
        - Year
      responses: {}
      operationId: get-year
  '/year/{year}':
    parameters:
      - schema:
          type: string
        name: year
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Year
      responses: {}
      operationId: get-year-year
  /user/login:
    post:
      summary: Request an JWT to sign future requests
      operationId: post-user-login
      responses:
        '200':
          description: If the login was successful a JWT will be returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
              examples:
                Example:
                  value:
                    message: 'Auth successful!'
                    token: yourJWT
        '401':
          description: 'There are two cases of failure. The first case is a wrong password, the second a wrong mail. Both times the user receives the same response to prevent brute force attacks to spoof passwords.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Auth failed!'
              examples:
                Example:
                  value:
                    message: 'Auth failed!'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                Example:
                  value:
                    error: {}
      description: |-
        All of the user requests need to be signed by a unique token. This token contains the user-mail, the user-id, a signing-timestamp and a expiration-time. A token expires in one hour.

        With the generated token the user is able to sign his request and obtains access to specific request routes. Which user has access to which routes will be discussed in the routes documentations.

        The following documentation describes how a user requests a token from the server.
      parameters:
        - schema:
            type: string
          in: header
          name: 'Content-Type: application/json'
          description: ''
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                password:
                  type: string
              required:
                - mail
                - password
            examples:
              Example:
                value:
                  mail: your@mail.com
                  password: yourpassword
        description: The user needs to verify himself to the server in order to generate a JSON Web Token.
      tags:
        - User
components:
  schemas: {}
  securitySchemes:
    JWT Token:
      type: http
      scheme: Bearer
      description: ''
